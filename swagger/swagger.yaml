openapi: "3.0.0"
info:
  version: 1.0.0
  title: Dan's Course management system
  description: This is the api server for a course management system
  contact:
    name: Dan Wang
    email: wnv-crimina@hotmail.com
servers:
  - url: /api

tags:
  - name: "users"
    description: "Operations about users"
  - name: "auth"
    description: "User authentication"
  - name: "courses"
    description: "Operations about courses"

paths:
  /users:
    post:
      tags:
        - "users"
      summary: "Register a new user"
      description: ""
      operationId: "addUser"
      requestBody:
        description: "Required user fields"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        400:
          description: "Bad Request"
        201:
          description: "Created"

  # --------------------------------- authentication start -------------------------- #
  /auth:
    post:
      tags:
        - 'auth'
      summary: 'login user'
      operationId: 'login'
      requestBody:
        description: 'Required user fields'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        200:
          description: 'Success'
        400:
          description: 'Invalid username or password'

  # --------------------------------- students start -------------------------- #
  /students:
    get:
      tags:
        - "students"
      summary: "Get all students"
      operationId: "getAllStudents"
      responses:
        200:
          description: "Success"
        401:
          description: "UnAuthorized"
        404:
          description: "Student not found"

    post:
      tags:
        - "students"
      summary: "Add new student"
      operationId: "addStudent"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        200:
          description: "Created"
        400:
          description: "Bad Request"
        401:
          description: "UnAuthorized"
    

  /students/{studentId}:
    get:
      tags:
        - "students"
      summary: "Get one student"
      description: "Returns a single student"
      operationId: "getStudentById"
      parameters:
        - name: "studentId"
          in: "path"
          description: "ID of student to return"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid params"
        401:
          description: "UnAuthorized"
        404:
          description: "Student not found"
    
    delete:
      tags:
        - "students"
      summary: "Deletes a student"
      description: ""
      operationId: "deleteStudent"
      parameters:
        - name: "StudentId"
          in: "path"
          description: "ID of student to delete"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid params"
        401:
          description: "UnAuthorized"
        404:
          description: "Student not found"

    put:
      tags:
        - "students"
      summary: "Updates a student"
      description: ""
      operationId: "updateStudent"
      parameters:
        - name: "studentId"
          in: "path"
          description: "ID of student to update"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid params"
        401:
          description: "UnAuthorized"
        404:
          description: "Student not found"

  /students/{studentId}/courses/{courseCode}:
    post:
      tags:
        - "students"
      summary: "Add course "
      description: "Add a course to a student"
      operationId: "addCourse"
      parameters:
        - name: "studentId"
          in: "path"
          description: "ID of student to add course"
          required: true
          schema:
            type: string
        - name: "courseCode"
          in: "path"
          description: "Code of course to be added"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid params"
        401:
          description: "UnAuthorized"
        404:
          description: "Course or student not found"

    delete:
      tags:
        - "students"
      summary: "Delete course "
      description: "Delete a course from a student"
      operationId: "deleteCourse"
      parameters:
        - name: "studentId"
          in: "path"
          description: "ID of student to delete course"
          required: true
          schema:
            type: string
        - name: "courseCode"
          in: "path"
          description: "Code of course to be deleted"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid params"
        401:
          description: "UnAuthorized"
        404:
          description: "Course or student not found"


  # --------------------------------- courses start -------------------------- #
  /courses:
    get:
      tags:
        - "courses"
      summary: "Get all courses"
      description: "return 10 by default"
      operationId: "getCourses"
      responses:
        200:
          description: "Success"
        401:
          description: "UnAuthorized"
      security:
        - Bearer: []

    post:
      tags:
        - "courses"
      summary: "Add new course"
      operationId: "addCourse"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        200:
          description: "Created"
        400:
          description: "Bad Request"
        401:
          description: "UnAuthorized"
      security:
        - Bearer: []

  /courses/{courseCode}:
    get:
      tags:
        - "courses"
      summary: "Find course by Code"
      description: "Returns a single course"
      operationId: "getCourseById"
      parameters:
        - name: "courseCode"
          in: "path"
          description: "Code of course to return"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid params"
        401:
          description: "UnAuthorized"
        404:
          description: "Course not found"
      security:
        - Bearer: []
    put:
      tags:
        - "courses"
      summary: "Updates a course"
      description: ""
      operationId: "updateCourse"
      parameters:
        - name: "courseCode"
          in: "path"
          description: "Code of course to return"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid params"
        401:
          description: "UnAuthorized"
        404:
          description: "Course not found"
      security:
        - Bearer: []
    delete:
      tags:
        - "courses"
      summary: "Deletes a course"
      description: ""
      operationId: "deleteCourse"
      parameters:
        - name: "courseCode"
          in: "path"
          description: "Code of course to return"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid params"
        401:
          description: "UnAuthorized"
        404:
          description: "Course not found"
      security:
        - Bearer: []

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: "object"
      properties:
        password:
          type: "string"
        username:
          type: "string"
    Student:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
    Course:
      type: "object"
      properties:
        code:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
    Auth:
      type: 'object'
      properties:
        username:
          type: 'string'
        password:
          type: 'string'
      
